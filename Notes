<!-- LOGIN SYSTEM  -->
 make a login file
 1> application/views/login.php  
 2> make two controller  Home.php and Login.php


 <!-- HOME Controller -->
in home controller check user is login or not 
  private function check_login()
    {
        if (!$this->session->userdata('user_id')) {
			// $this->load->view('admin/login');
			// redirect(base_url('login'));
			// redirect("login");
			echo "Redirecting to login...";
			redirect("login");

        }
    }
	called this function in constructor

	now chack user is same company and status is active or not for that write code insid the nav 
	public function nav()
    {
		$data['user_details'] = $this->My_model->select_where("login_tbl", ['login_tbl_id' => $_SESSION['user_id']]);
        if (!isset($data['user_details'][0])) {
            session_destroy();
			redirect("login");
        }

        $this->load->view("admin/nav",$data);
    }

	<!-- LOGIN controller -->
in this file make index page which redirect to the login page 
and 
in every page consist navbar so this function always be there so no need to write no. of times writethis code , just add in nav function 
	public function nav()
		{
			$data['user_details'] = $this->My_model->select_where("login_tbl", ['login_tbl_id' => $_SESSION['user_id']]);
			if (!isset($data['user_details'][0])) {
				session_destroy();
				redirect("login");
			}

			$this->load->view("admin/nav",$data);
		}


after form submisiion this will be run 

	public function login_process() {
			$username = $this->input->post('username');
			$password = $this->input->post('password');
		
			$user = $this->My_model->validate_user($username, $password, 'login_tbl');
		
			// print_r($user); // ✅ Debugging: Check what $user contains
		
			if ($user) {
				$this->session->set_userdata('user_id', $user['login_tbl_id']);
				$this->session->set_userdata('username', $user['username']);
		
				redirect('home/index');
			} else {
				$this->session->set_flashdata('error', 'Invalid Username or Password');
				redirect('login');
			}
		}

		

		// Logout function
		public function logout() {
			$this->session->sess_destroy();
			redirect('home/login');
		}
		


		<!-- how to include sidebar , navbar ,footer in every page  and session/authentication -->
		 <!-- home controller -->
		  in controller make 3 fucntion navbar, footer

		public function nav()  
		{
			$data['user_details'] = $this->My_model->select_where("login_tbl", ['login_tbl_id' => $_SESSION['user_id']]);
			if (!isset($data['user_details'][0])) {
				session_destroy();
				redirect("login");
			}

			$this->load->view("admin/nav",$data);
		}

		public function footer()
		{
			$this->load->view("admin/footer");
		}

		<!-- now add both function in one  -->
		public function open_view($page, $data = [])
		{
			$this->nav();
			$this->load->view("admin/" . $page, $data);
			$this->footer();
		}

		<!-- now whene ever we need to include navbar and footer in main page  -->
		 in the place of  $this->load>view('about'); we have to write $this->open_view('filename', $_post); $_post contain data liekthis 
		 
		 public function add_staff()
		{
			$this->open_view("add_staff");
		}

		add_staff is called by href link through

		<!-- in ci do not write  <a href="<?=base_url()?>home/add_staff">About Us</a> -->  add staff is a function which is define in a controller 




_________________________________________________________________________________________________________________________________________________
		
<!-- Implementing Role-Based Access Control (RBAC)  in CodeIgniter 3 -->

<!-- My_Controller --> Parent controller

In large projects, many pages require authentication (checking if the user is logged in).

Instead of repeating the same authentication code in every controller, we create a base controller (My_Controller).

This parent controller will automatically check user roles and permissions.
File Location: application/core/My_Controller.php

Explanation:
__construct()

Runs automatically when the controller is called.

Calls check_session() to verify if the user is logged in.

check_session()

If the user is not logged in, they are redirected to the login page.

check_role($allowed_roles)

Checks if the user’s role is in the allowed list.

If the user does not have permission, it shows an error message.
--------------------------------------------------------------------------------------------
<!-- Auth.php  --> Authentication controller 
 it extend CI_Controller
 here we write login, login_process, and logout function 
 create the session and check user role is what , accordign to this we redirect the pages
 --------------------------------------------------------------------------------------------

<!-- Admmin.php -->
Admin extends My_Controller

It inherits authentication checks from My_Controller.

check_role(['admin', 'manager']) ensures only admins and managers can access this page.
or
$this->check_role(['admin']); // Restrict access to only admin

<!-- Manager.php -->

This controller allows access to manager

If a non-allowed role (e.g., guest) tries to access it, they get an access denied error.



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<!-- FORM VALIDATION IN CI3 -->
$this->load->library('form_validation');
			OR
	<!-- application/config/autoload.php: -->
$autoload['libraries'] = array('form_validation');

$this->form_validation->set_rules('email', 'Email', 'required|valid_email');
$this->form_validation->set_rules('password', 'Password', 'required|min_length[5]');

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<!-- Storing Data in Session -->

$this->load->library('session');
			<!-- OR -->
$autoload['libraries'] = array('session');

$this->session->set_userdata('key','value');
for example
$this->session->set_userdata('username', $username);
$this->session->set_userdata('useremail', $email);

		<!-- Or store an array: -->
$session_data(
	'user_id' => $Id,
	'username' => $name,
	'UserEmail' => $email
);
$this->session->set_userdata($session_data);

<!-- Retrieving Session Data -->
$user_id = $this->session->userdata('user_id');
$userName = $this->session->userdata('username');
$userEmail = $this->session->userdata('useremail');

echo "User ID: " . $user_id;
echo "Email: " . $userEmail;
echo "Role: " . $userName;

<!-- Destroying the Session (Logout) -->
$this->session->sess_destroy();
redirect('auth/login');

<!-- Implementing Session in Login -->
public function validate_login() {
    $this->form_validation->set_rules('email', 'Email', 'required|valid_email');
    $this->form_validation->set_rules('password', 'Password', 'required|min_length[5]');

    if ($this->form_validation->run() == FALSE) {
        $this->load->view('auth/login');
    } else {
        // Fetch user from database
        $user = $this->db->get_where('users', ['email' => $this->input->post('email')])->row_array();

        if ($user && $user['password'] == $this->input->post('password')) {
            // Set session
            $session_data = array(
                'user_id' => $user['user_tbl_id'],
                'email' => $user['email'],
                'role' => $user['role']
            );
            $this->session->set_userdata($session_data);

            redirect('admin/index'); // Redirect to dashboard
        } else {
            $this->session->set_flashdata('error', 'Invalid Email or Password');
            redirect('auth/login');
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

<!-- FILE UPLOADS -->
CodeIgniter provides a built-in File Uploading Class to handle file uploads easily.
$this->load->library('upload'); 
<!-- OR ADD IN Autoload.php file  -->
$autoload['libraries'] = array('upload');


<!-- in controller  -->
<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Upload extends CI_Controller {

    public function __construct() {
        parent::__construct();
        $this->load->library('upload');
    }

    public function index() {
        $this->load->view('upload_form');
    }

    public function do_upload() {
        // Configuration for file upload
        $config['upload_path']   = './uploads/'; // Folder where files will be uploaded
        $config['allowed_types'] = 'jpg|png|gif|pdf|docx'; // Allowed file types
        $config['max_size']      = 2048; // File size limit (2MB)
        $config['encrypt_name']  = TRUE; // Encrypt file name to prevent overwriting

        $this->upload->initialize($config);

        if (!$this->upload->do_upload('userfile')) {
            // Upload failed
            $error = array('error' => $this->upload->display_errors());
            $this->load->view('upload_form', $error);
        } else {
            // Upload success
            $data = array('upload_data' => $this->upload->data());
            $this->load->view('upload_success', $data);
        }
    }
}
?>

upload_path: Defines the folder where files will be stored.

allowed_types: Limits the file types (JPG, PNG, GIF, PDF, DOCX).

max_size: Restricts file size (in KB).

encrypt_name: Renames files to prevent conflicts.

<!-- Handling Multiple File Uploads -->
public function multiple_upload() {
    $config['upload_path']   = './uploads/';
    $config['allowed_types'] = 'jpg|png|gif|pdf|docx';
    $config['max_size']      = 2048;
    $config['encrypt_name']  = TRUE;

    $this->load->library('upload', $config);

    $files = $_FILES;
    $count = count($_FILES['userfiles']['name']); // Count total files

    for ($i = 0; $i < $count; $i++) {
        $_FILES['userfile']['name']     = $files['userfiles']['name'][$i];
        $_FILES['userfile']['type']     = $files['userfiles']['type'][$i];
        $_FILES['userfile']['tmp_name'] = $files['userfiles']['tmp_name'][$i];
        $_FILES['userfile']['error']    = $files['userfiles']['error'][$i];
        $_FILES['userfile']['size']     = $files['userfiles']['size'][$i];

        $this->upload->initialize($config);

        if ($this->upload->do_upload('userfile')) {
            $data['uploads'][] = $this->upload->data();
        }
    }

    $this->load->view('upload_success', $data);
}
<form action="<?php echo base_url('upload/multiple_upload'); ?>" method="post" enctype="multipart/form-data">
    <input type="file" name="userfiles[]" multiple />
    <br><br>
    <input type="submit" value="Upload">
</form>


<!--  Deleting Uploaded Files -->
public function delete_file($filename) {
    $file_path = './uploads/' . $filename;
    if (file_exists($file_path)) {
        unlink($file_path);
        echo "File deleted successfully.";
    } else {
        echo "File not found.";
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------
	***********************	 FILE UPLOAD IN PRACTICAL WAY  ***********************
----------------------------------------------------------------------------------------------------------------------------------------------------------
File Upload in the Form
<form action="<?= base_url('admin/insert_user'); ?>" method="POST" enctype="multipart/form-data">
    <input type="text" name="name" placeholder="Enter Name" required>
    <input type="email" name="email" placeholder="Enter Email" required>
    <input type="file" name="upload_file"> <!-- File input -->
    <button type="submit">Submit</button>
</form>

<!-- The enctype="multipart/form-data" is important for file uploads.

The file input field name is upload_file, which is used in PHP to retrieve the file. -->

Retrieving the Uploaded File in the Controller
<!-- When the form is submitted, it reaches the insert_user() function in the Admin controller: -->
	$image_data = $_FILES['upload_file']['name'];
$tmp = $_FILES['upload_file']['tmp_name'];
$image_name = $this->upload_img($image_data, $tmp); // Upload and get filename

<!-- Moving the File to the Uploads Folder -->
function upload_img($imgname, $imgtemp, $path = "uploads/")
{
    if ($imgname != "") {
        // Generate a unique file name
        $fname = time() . rand(00000000, 99999999) . "." . pathinfo($imgname, PATHINFO_EXTENSION);
        $path1 = $path . $fname;

        // Move the uploaded file to the designated folder
        move_uploaded_file($imgtemp, $path1);

        return $fname; // Return the new filename for database storage
    } else {
        return null; // No file uploaded
    }
}

It generates a unique filename using time() + rand().

move_uploaded_file($imgtemp, $path1) moves the file from temp storage to the uploads/ folder.

The function returns the saved filename (e.g., 171173934312345678.jpg).

<!-- Storing the File Name in the Database -->
$data = [
    'name' => $this->input->post('name'),
    'email' => $this->input->post('email'),
    'image' => $image_name  // Store only the filename in the database
];

$this->My_model->insert_data('form', $data);

<!-- Retrieving and Displaying the Image -->
<img src="<?= base_url('uploads/' . $user->image); ?>" alt="User Image">



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
							add multiple file upload
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[1] <!-- Add image input box name will be array form -->
<input type="file" class="form-control" name="upload_file[]" multiple>

[2]  <!-- on insert function put images   -->
	$uploaded_files = [];
	if (!empty($_FILES['upload_file']['name'][0])) {
		$uploaded_files = $this->upload_img($_FILES['upload_file']['name'], $_FILES['upload_file']['tmp_name']);
	}

	// **Convert array to JSON before storing**
	$image_name = json_encode($uploaded_files);

		$data = [
			'name' => $this->input->post('name'),
			'email' => $this->input->post('email'),
			'image' => $image_name 
		];

		$this->My_model->insert_data('form', $data);

[3]  <!-- make upload_img function properly  -->
	function upload_img($imgname, $imgtemp, $path = "uploads/") {
			if (!empty($imgname)) {
				// Generate unique filename
				$fname = time() . rand(00000000, 99999999) . "." . pathinfo($imgname, PATHINFO_EXTENSION);
				$path1 = $path . $fname;
		
				// Move the uploaded file to the designated path
				move_uploaded_file($imgtemp, $path1);
		
				return $fname; // Return filename for database storage
			}
			return null; // Return null if no file is uploaded
	}

	<!-- pathinfo($imgname, PATHINFO_EXTENSION) is a PHP function that extracts the file extension from a given file name.
		We use it to get the file extension (like jpg, png, pdf, etc.) from an uploaded file name. This helps in:

	Ensuring proper file type validation

	Generating unique file names when saving uploads

	Preventing security risks (like executing harmful scripts)
	It works even if the file has multiple dots, like my.file.name.png, whereas explode() can fail in such cases. -->



[4] <!--To show all imgaes in table in one box   -->

<td>
	<?php
	$images = json_decode($user['image'], true); //store as a json
	if(is_array($images))
	{
		foreach($images as $img){
			echo '<img src="' . base_url('uploads/' . $img). '"      height="100px" width="90px" alt="images" >';
		}
	}elseif(!empty($user['image'])){
		// If only a single image is stored as a string, show it directly
		echo '<img src="' . base_url('uploads/' . $user['image']) . '" width="100px" height="90px" alt="User Image">';
	} else {
			echo '<p>No Image Available</p>';
		}
	
	?>
</td>


[5] <!-- edit images  in view file -->

					<div class="col-mb-6">
						<label for="image">Current Image</label><br>
						<?php 
						$images = json_decode($edit_user['image'], true); // Decode JSON if multiple images
						if (is_array($images)) {
							foreach ($images as $img) {
								echo '<img src="' . base_url('uploads/' . $img) . '" width="100px" height="90px" alt="User Image" style="margin:5px;">';
							}
						} elseif (!empty($edit_user['image'])) { 
							// If only a single image is stored as a string
							echo '<img src="' . base_url('uploads/' . $edit_user['image']) . '" width="100px" height="90px" alt="User Image">';
						} else {
							echo '<p>No Image Available</p>';
						}
						?>
					</div>

[6] <!--update   -->
public function update_user() {
    $table_id = $this->input->post('table_id');

    $this->form_validation->set_rules('name', 'Name', 'required|min_length[3]');
    $this->form_validation->set_rules('email', 'Email', 'required|valid_email');

    if ($this->form_validation->run() == FALSE) {
        $this->edit_user($table_id); // Reload edit page with validation errors
    } else {
        // Retrieve the existing user data
        $user = $this->My_model->select_where('form', ['table_id' => $table_id]);

        // Delete old images if new images are uploaded
        if (!empty($_FILES['upload_file']['name'][0])) { // Check if any file is selected
            $old_images = json_decode($user['image'], true);

            if (is_array($old_images)) {
                foreach ($old_images as $old_img) {
                    $old_img_path = 'uploads/' . $old_img;
                    if (file_exists($old_img_path)) {
                        unlink($old_img_path); // Delete old image from folder
                    }
                }
            } elseif (!empty($user['image'])) { // If it's a single image (not JSON array)
                $old_img_path = 'uploads/' . $user['image'];
                if (file_exists($old_img_path)) {
                    unlink($old_img_path); // Delete old image from folder
                }
            }
        }

        // Upload new images
        $uploaded_images = [];
        if (!empty($_FILES['upload_file']['name'][0])) {
            foreach ($_FILES['upload_file']['name'] as $key => $img_name) {
                $img_temp = $_FILES['upload_file']['tmp_name'][$key];
                $uploaded_images[] = $this->upload_img($img_name, $img_temp);
            }
        }

        // Use new images if uploaded, otherwise keep old images
        $final_images = !empty($uploaded_images) ? $uploaded_images : json_decode($user['image'], true);

        // Prepare data for update
        $data = [
            'name' => $this->input->post('name'),
            'email' => $this->input->post('email'),
            'image' => json_encode($final_images)
        ];

        // Update database
        $this->My_model->update_data('form', $data, ['table_id' => $table_id]);
        $this->session->set_flashdata('success', 'User updated successfully!');
        redirect('admin/user_list');
    }
}
										

---------------------------------------------------------------------------------------------------------------------------------------- 
		AJAX (Asynchronous JavaScript and XML)
-----------------------------------------------------------------------------------------------------------------------------------------
AJAX (Asynchronous JavaScript and XML) is a technique that allows web pages to communicate with the server without reloading the page.

AJAX works by using JavaScript to send and receive data from the server in the background, while the user continues to interact with the page.

 Steps of AJAX Working:
A user triggers an event (e.g., clicking a button or submitting a form).

JavaScript creates an AJAX request to the server.

The server processes the request (e.g., inserts data into a database).

The server responds with data (JSON, HTML, or text).

JavaScript updates the webpage without refreshing.
✅ Faster Performance 
✅ Better User Experience 
✅ Less Server Load 
✅ Seamless Updates 

<button id="loadData">Load Data</button>
<div id="result"></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $("#loadData").click(function() {
            $.ajax({
				url: "<?= base_url('user/fetch_users'); ?>", // AJAX URL
                type: "GET",
                success: function(response) {
                    $("#result").html(response); // Update HTML dynamically
                }
            });
        });
    });
</script>

-----------------------------------------------ROUT---------------------------------------------------------------------------------------------------------------

🔹 1. What is Routing in CodeIgniter 4?
Routing in CodeIgniter 4 is used to map URLs to specific controllers and methods. It helps define custom URLs instead of relying on default controller/method naming conventions.

📌 Types of Routing in CodeIgniter 4:

Default Routing → Routes to the default controller.  $routes->get('/', 'Home::index'); // Calls Home controller index() method


Custom Routing → Manually define a specific URL pattern.  like this  $routes->get('about', 'Pages::about'); // example.com/about
$routes->get('contact', 'Pages::contact'); // example.com/contact


Dynamic Routing → Use parameters in URLs.  $routes->get('user/(:num)', 'UserController::profile/$1'); 
// example.com/user/5 → Calls UserController's profile(5)
📌 (:num) → Matches numbers only.
📌 (:any) → Matches any string or number.


RESTful Routing → Create API routes for GET, POST, PUT, DELETE requests. $routes->resource('users'); // Creates RESTful routes for UserController
This automatically generates API endpoints like:

GET /users → Fetch all users

POST /users → Create a new user

GET /users/1 → Fetch user with ID 1

PUT /users/1 → Update user with ID 1

DELETE /users/1 → Delete user with ID 1

---------------------------------------------------------------------------------------------------------------------------------------------
						MIDDLEWARE
						
🚫 CodeIgniter 3 does NOT have built-in middleware.
✅ Instead, we use Hooks for middleware-like behavior.

📍 Location: application/config/hooks.php

Yes! Instead of using Hooks in CodeIgniter 3, you can create a custom base controller (My_Controller) 
in the core directory and implement role-based access control (RBAC) directly.
 This is a better approach because it keeps authentication logic centralized and avoids the need for additional hook configurations.

 ✔ No Need for Hooks – Everything is managed inside My_Controller.
✔ Cleaner Code – No need to check login in every controller manually.
✔ Centralized Role Management – Easily restrict access based on roles.

🚀 This is the best way to implement authentication and role-based access in CodeIgniter 3


<!-- HOOKS  -->
A hook in CodeIgniter 3 is a way to execute custom code before, after, or during the execution of a request without modifying core 
files. Hooks allow you to extend the framework’s functionality in a structured way.
---------------------------------------------------------------------------------------------------------------------------------------------------
						HMVC  (Hierarchical Model-View-Controller)
--------------------------------------------------------------------------------------------------------------------------------------------------- 
🧐 What is HMVC?
HMVC (Hierarchical Model-View-Controller) is an advanced version of the MVC architecture.
It allows modular development, meaning you can split large projects into smaller independent modules.
1️⃣ Code Reusability – You can reuse modules in different projects.
2️⃣ Better Organization – Each module has its own controllers, models, and views.
3️⃣ Easy Maintenance – Each module functions independently.
4️⃣ Faster Development – You can work on different modules simultaneously.

By default, CodeIgniter 3 does not support HMVC. We need to install a third-party HMVC extension.
Extract the downloaded zip file and copy these folders into your CodeIgniter application/ folder:

core → Paste inside application/

third_party → Paste inside application/
$config['modules_locations'] = array(APPPATH.'modules/' => '../modules/');
Create a Sample Module (Users Module)
application/
│── modules/
│   ├── users/
│   │   ├── controllers/
│   │   │   ├── Users.php
│   │   ├── models/
│   │   │   ├── Users_model.php
│   │   ├── views/
│   │   │   ├── users_list.php


in this  controller we extend MX_Controller 
class Users extends MX_Controller 
✅ MX_Controller is part of the HMVC extension in CodeIgniter 3.
✅ It extends CI_Controller and allows module-based development.
✅ Using MX_Controller, you can load models, views, and controllers across different modules.
